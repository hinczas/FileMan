@model Raf.FileMan.Models.ViewModels.AdminIndexVM
@{
    ViewBag.Title = "Admin";
}
<div class="col-md-12">
    <ol class="breadcrumbz" style="margin-bottom:10px;">
        <li class="js-link disp-align-ver" onclick="@Model.ReturnFunction"><i class="fas fa-angle-left"></i>&emsp13;<span> back to <b>previous page</b></span></li>
    </ol>
</div>

<div class="col-md-12">
    <div class="settings">
        <div class="col-md-3">
            <h4>Drive</h4>
            <p> * Space on server drive</p>
            <div class="chart-hold-pie">
                <canvas id="driveSizeChart" width="50" height="50"></canvas>
            </div>
        </div>
        <div class="col-md-3">
            <h4>Totals</h4>
            <p> * Current db status counts</p>
            <div class="chart-hold-pie">
                <ul class="badge-list">
                    <li><div class="badge-holder"><span class="badge badge-user">Users</span> @Model.NumUsers</div></li>
                    <li><div class="badge-holder"><span class="badge badge-cat">Categories</span> @Model.NumCats</div></li>
                    <li><div class="badge-holder"><span class="badge badge-doc">Documents</span> @Model.NumDocs</div></li>
                    <li><div class="badge-holder"><span class="badge badge-rev">Revisions</span> @Model.NumRevs</div></li>
                    <li></li>
                    <li><div class="badge-holder"><span class="badge badge-cat">Physical files</span> @Model.NumPhisDocs</div></li>
                    <li><div class="badge-holder"><span class="badge badge-doc">Logical files</span> @Model.NumPhisCats</div></li>
                </ul>
            </div>
        </div>
        <div class="col-md-6">
            <h4>Monthly stats</h4>
            <p> * Categories, documents and revisions created in last 6 months</p>
            <canvas id="monthlyChart" width="200" height="100"></canvas>
        </div>
        <hr />
    </div>
</div>

<div class="col-md-12">
    <div class="settings">        
        <div class="col-md-12">
            <h4>Top users</h4>
            <p> * Top 3 users with most docs, cats and revisions</p>
            <div class="chart-holder">
                <div class="chart-hold-pie">
                    <p><b>#1. </b><span class="nor" onclick="goToManage('@Model.TopUsers.First().UserId')">@Model.TopUsers.First().UserName</span></p>
                    <canvas id="topUsersChart" width="100" height="100"></canvas>
                </div>
                <div class="chart-hold-pie">
                    @if (@Model.TopUsers.Count > 1)
                    {
                        <p><b>#2. </b>@Model.TopUsers.Skip(1).First().UserName</p>
                        <ul>
                            <li>Categories: @Model.TopUsers.Skip(1).First().NumCats</li>
                            <li>Documents: @Model.TopUsers.Skip(1).First().NumDocs</li>
                            <li>Revisions: @Model.TopUsers.Skip(1).First().NumRevs</li>
                            <li></li>
                            <li>Total: @Model.TopUsers.Skip(1).First().NumTotal</li>
                        </ul>
                    }
                    else
                    {
                        <p><b>#2. </b>N/A</p>
                    }
                </div>
                <div class="chart-hold-pie">
                    @if (@Model.TopUsers.Count > 2)
                    {
                        <p><b>#3. </b>@Model.TopUsers.Skip(2).First().UserName</p>
                        <ul>
                            <li>Categories: @Model.TopUsers.Skip(2).First().NumCats</li>
                            <li>Documents: @Model.TopUsers.Skip(2).First().NumDocs</li>
                            <li>Revisions: @Model.TopUsers.Skip(2).First().NumRevs</li>
                            <li></li>
                            <li>Total: @Model.TopUsers.Skip(2).First().NumTotal</li>
                        </ul>
                    }
                    else
                    {
                        <p><b>#3. </b>N/A</p>
                    }
                </div>
            </div>

            <hr />
        </div>
    </div>
</div>

<script>
    var ctx = document.getElementById('monthlyChart').getContext('2d');
    var months = JSON.parse('@Html.Raw(Json.Encode(@Model.MonthlyStats.Select(a => a.MonthName).ToList()))')
    var docs = JSON.parse('@Html.Raw(Json.Encode(@Model.MonthlyStats.Select(a => a.NumDocs).ToList()))')
    var cats = JSON.parse('@Html.Raw(Json.Encode(@Model.MonthlyStats.Select(a => a.NumCats).ToList()))')
    var revs = JSON.parse('@Html.Raw(Json.Encode(@Model.MonthlyStats.Select(a => a.NumRevs).ToList()))')
    var myChart = new Chart(ctx, {
        type: 'bar',
        data: {
            labels: months,
            datasets: [{
                label: '# of Categories',
                data: cats,
                backgroundColor: [
                    'rgba(255, 99, 132, 0.5)',
                    'rgba(255, 99, 132, 0.5)',
                    'rgba(255, 99, 132, 0.5)',
                    'rgba(255, 99, 132, 0.5)',
                    'rgba(255, 99, 132, 0.5)',
                    'rgba(255, 99, 132, 0.5)'
                ],
                borderColor: [
                    'rgba(255, 99, 132, 1)',
                    'rgba(255, 99, 132, 1)',
                    'rgba(255, 99, 132, 1)',
                    'rgba(255, 99, 132, 1)',
                    'rgba(255, 99, 132, 1)',
                    'rgba(255, 99, 132, 1)'
                ],
                borderWidth: 1
            },
            {
                label: '# of Documents',
                data: docs,
                backgroundColor: [
                    'rgba(54, 162, 235, 0.5)',
                    'rgba(54, 162, 235, 0.5)',
                    'rgba(54, 162, 235, 0.5)',
                    'rgba(54, 162, 235, 0.5)',
                    'rgba(54, 162, 235, 0.5)',
                    'rgba(54, 162, 235, 0.5)'
                ],
                borderColor: [
                    'rgba(54, 162, 235, 1)',
                    'rgba(54, 162, 235, 1)',
                    'rgba(54, 162, 235, 1)',
                    'rgba(54, 162, 235, 1)',
                    'rgba(54, 162, 235, 1)',
                    'rgba(54, 162, 235, 1)',
                ],
                borderWidth: 1
                },
                {
                    label: '# of Revisions',
                    data: revs,
                    backgroundColor: [
                        'rgba(255, 206, 86, 0.5)',
                        'rgba(255, 206, 86, 0.5)',
                        'rgba(255, 206, 86, 0.5)',
                        'rgba(255, 206, 86, 0.5)',
                        'rgba(255, 206, 86, 0.5)',
                        'rgba(255, 206, 86, 0.5)'
                    ],
                    borderColor: [
                        'rgba(255, 206, 86, 1)',
                        'rgba(255, 206, 86, 1)',
                        'rgba(255, 206, 86, 1)',
                        'rgba(255, 206, 86, 1)',
                        'rgba(255, 206, 86, 1)',
                        'rgba(255, 206, 86, 1)'
                    ],
                    borderWidth: 1
                }]
        },
        options: {
            scales: {
                yAxes: [{
                    ticks: {
                        beginAtZero: true
                    }
                }]
            }
        }
    });

    var tuCtx = document.getElementById('topUsersChart').getContext('2d');

    var nums = [@Model.TopUsers.First().NumCats, @Model.TopUsers.First().NumDocs,  @Model.TopUsers.First().NumRevs];
    var topChart = new Chart(tuCtx, {
        type: 'doughnut',
        data: {
            labels: ["Categories", "Documents", "Revisions"],
            datasets: [{
                data: nums,
			        backgroundColor: [
                    "rgb(255, 99, 132, 0.5)",
                    "rgb(54, 162, 235, 0.5)",
                    "rgb(255, 206, 86, 0.5)"]
            }]

        }
    });

    var dsCtx = document.getElementById('driveSizeChart').getContext('2d');

    var sizes = [@Model.DriveUsed, @Model.DriveFree];
    var driveChart = new Chart(dsCtx, {
        type: 'doughnut',
        data: {
            labels: ["Used space", "Free space"],
            datasets: [{
                data: sizes,
			        backgroundColor: [
                    "rgb(255, 99, 132, 0.5)",
                    "rgb(0, 204, 102, 0.5)"]
            }]

        }
    });

</script>
